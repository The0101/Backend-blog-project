let Schema,model,hash,compare,sign;_f7b‍.x([["default",()=>_f7b‍.o]]);_f7b‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}],["model",["model"],function(v){model=v}]]);_f7b‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}],["compare",["compare"],function(v){compare=v}]]);_f7b‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}]]);



const UserSchema = new Schema({
    avatar: {type: String, default:""},
    name: {type: String, required: true},
    email: {type: String, required: true},
    password: {type: String, required: true},
    verified: {type: String, required: true},
    verification: {type: Boolean, default: false},
    verificationcode: {type: String, required: false},
    admin:{ type: Boolean, default: false},
},
{ timestamps: true }    
);

UserSchema.pre("save", async function (next) {
    if (this.isModified("password")) {
      this.password = await hash(this.password, 10);
      return next();
    }
    return next();
  });
  
  UserSchema.methods.generateJWT = async function () {
    return await sign({ id: this._id }, process.env.JWT_SECRET, {
      expiresIn: "30d",
    });
  };

UserSchema.methods.comparePassword = async function (enteredPassword) {
  return await compare(enteredPassword, this.password);
};

const User = model("User", UserSchema);
_f7b‍.d(User);

